@model SIGEM_BIDSS.Models.tbLiquidacionAnticipoViaticoDetalle

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Content/template/plugins/font-awesome/css/font-awesome.min.css" rel="stylesheet" />
<link href="~/Content/template/plugins/datatables/dataTables.bootstrap4.css" rel="stylesheet" />


<link href="~/Content/template/plugins/datepicker/css/bootstrap-datepicker3.min.css" rel="stylesheet" />
<div class="card card-primary card-outline">
    <div class="card-header d-flex p-0 ui-sortable-handle">
        <h3 class="card-title p-3">
            <i class="fa fa-upload mr-1"></i>
            Insertar Liquidación Anticipo Viáticos Detalle
        </h3>
        <ul class="nav nav-pills ml-auto p-2">
            <li class="nav-item">
                @Html.ActionLink("Regresar", "Index", null, new { @class = "btn btn-primary" })
            </li>
        </ul>
    </div>

    @using (Html.BeginForm(null, null, FormMethod.Post, FormMethod.Post, new { id = "frmAnticipoViatico" }))
    {
        @Html.AntiForgeryToken()
        @*@Html.HiddenFor(model => model.Anvi_Id)
            @Html.HiddenFor(model => model.est_Id)*@
        @Html.HiddenFor(model => model.Lianvi_Id)
        <input type="hidden" id="custId" name="custId" value="3487">
        <div class="form-horizontal">
            <div class="card-body">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })




                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.Lianvide_Archivo, htmlAttributes: new { @class = "control-label col-md-6" })
                    <div class="col-md-11">
                        <input type="file" class="custom-file-input" id="LianvideArchivo">
                        <label class="custom-file-label" for="LianvideArchivo" id="Archivo_Name"></label>

                        @Html.ValidationMessageFor(model => model.Lianvide_Archivo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">




                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.Lianvide_FechaGasto, htmlAttributes: new { @class = "control-label col-md-6" })
                        <div class="col-md-11">
                            @Html.EditorFor(model => model.Lianvide_FechaGasto, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })

                            @Html.ValidationMessageFor(model => model.Lianvide_FechaGasto, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.Lianvide_MontoGasto, htmlAttributes: new { @class = "control-label col-md-6" })
                        <div class="col-md-11">

                            @Html.EditorFor(model => model.Lianvide_MontoGasto, new { htmlAttributes = new { @class = "form-control normalize", @autocomplete = "off", @OnKeyPress = "return soloNumeros(event)", @onChange = "MASK(this,this.value,'-###,###,###,##0.00',1)" } })
                            <div id="ValidationMonto"> @Html.ValidationMessageFor(model => model.Lianvide_MontoGasto, "", new { @class = "text-danger" })    </div>
                        </div>
                    </div>

                </div>

                <div class="form-row">

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.tpv_Id, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-11">
                            @Html.DropDownList("tpv_Id", null, "Seleccione Tipo Gasto", new { @class = "form-control" })
                            <div id="ValidationGastos"> @Html.ValidationMessageFor(model => model.tpv_Id, "", new { @class = "text-danger" })</div>
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.Lianvide_Concepto, htmlAttributes: new { @class = "control-label col-md-6" })
                        <div class="col-md-11">
                            @Html.EditorFor(model => model.Lianvide_Concepto, new { htmlAttributes = new { @class = "form-control", @maxlength = 250, @autocomplete = "off" } })
                            <div id="ValidationDepconcepto">
                                @Html.ValidationMessageFor(model => model.Lianvide_Concepto, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                </div>

                <br />
                <div class="form-group">
                    <div class="col-md-offset-4">
                        <input type="button" value="Agregar" id="AgregarDetalle" class="btn btn-primary btn-sm" />
                    </div>
                </div>

            </div>
            <table class="table table-bordered table-hover" id="dataTable">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.Lianvide_FechaGasto)
                        </th>
                        <th>
                            Tipo Gasto
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Lianvide_Concepto)
                        </th>

                        <th>
                            Monto de Gastos
                        </th>


                        <th>
                            Acciones
                        </th>
                    </tr>
                </thead>
                <tbody></tbody>

                <tfoot>
                    <tr>
                        <th>

                        </th>
                        <th>

                        </th>
                        <th>

                        </th>

                        <th>
                            Total Gastos
                        </th>
                        
                        <th>

                        </th>

                    </tr>
                </tfoot>

            </table>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Guardar" id="Save" class="btn btn-primary" />
                    @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-default" })
                </div>
            </div>



        </div>
    }
    <br />




</div>

@section Scripts {


    <script src="~/Content/template/plugins/datepicker/js/bootstrap-datepicker.min.js"></script>
    <script src="~/Content/template/plugins/datepicker/locales/bootstrap-datepicker.es.min.js"></script>

    <script src="~/Content/template/plugins/bs-custom-file-input/bs-custom-file-input.min.js"></script>
    <!-- DataTables -->
    <script src="~/Content/template/plugins/datatables/jquery.dataTables.js"></script>
    <script src="~/Content/template/plugins/datatables/dataTables.bootstrap4.js"></script>

    <script src="~/Scripts/app/ValidacionesGenerales.js"></script>

    <script src="~/Scripts/app/Solicitud/LiquidacionAnticipoViaticoDetalle.js"></script>
    <script src="~/Scripts/app/DataTables.js"></script>
    <script>
        $("#Lianvi_FechaLiquida").keyup(function () {
            $('#estId').hide();
        });

        // Add the following code if you want the name of the file appear on select
        $(".custom-file-input").on("change", function () {
            var fileName = $(this).val().split("\\").pop();
            $(this).siblings(".custom-file-label").addClass("selected").html(fileName);
        });

        function MASK(form, n, mask, format) {
            if (format == "undefined") format = false;
            if (format || NUM(n)) {
                dec = 0, point = 0;
                x = mask.indexOf(".") + 1;
                if (x) { dec = mask.length - x; }



                if (dec) {
                    n = NUM(n, dec) + "";
                    x = n.indexOf(".") + 1;
                    if (x) { point = n.length - x; } else { n += "."; }
                } else {
                    n = NUM(n, 0) + "";
                }
                for (var x = point; x < dec; x++) {
                    n += "0";
                }
                x = n.length, y = mask.length, XMASK = "";
                while (x || y) {
                    if (x) {
                        while (y && "#0.".indexOf(mask.charAt(y - 1)) == -1) {
                            if (n.charAt(x - 1) != "-")
                                XMASK = mask.charAt(y - 1) + XMASK;
                            y--;
                        }
                        XMASK = n.charAt(x - 1) + XMASK, x--;
                    } else if (y && "$0".indexOf(mask.charAt(y - 1)) + 1) {
                        XMASK = mask.charAt(y - 1) + XMASK;
                    }
                    if (y) { y-- }
                }
            } else {
                XMASK = "";
            }
            if (form) {
                form.value = XMASK;
                if (NUM(n) < 0) {
                    form.style.color = "#FF0000";
                } else {
                    form.style.color = "#000000";
                }
            }
            return XMASK;
        }

        // Convierte una cadena alfanumérica a numérica (incluyendo formulas aritméticas)
        //
        // s   = cadena a ser convertida a numérica
        // dec = numero de decimales a redondear
        //
        // La función devuelve el numero redondeado

        function NUM(s, dec) {
            for (var s = s + "", num = "", x = 0; x < s.length; x++) {
                c = s.charAt(x);
                if (".-+/*".indexOf(c) + 1 || c != " " && !isNaN(c)) { num += c; }
            }
            if (isNaN(num)) { num = eval(num); }
            if (num == "") { num = 0; } else { num = parseFloat(num); }
            if (dec != undefined) {
                r = .5; if (num < 0) r = -r;
                e = Math.pow(10, (dec > 0) ? dec : 0);
                return parseInt(num * e + r) / e;
            } else {
                return num;
            }
        }


    </script>
}
