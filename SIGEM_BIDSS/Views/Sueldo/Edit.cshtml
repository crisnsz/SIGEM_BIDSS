@model SIGEM_BIDSS.Models.tbSueldo

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .validation-error {
        color: red;
        font-size: small;
    }

    .validation-summary-errors {
        color: red;
        font-size: small;
    }

    .required:after {
        content: "*";
        font-weight: bold;
        color: red;
    }

    #tmo_Nombre {
        text-transform: uppercase;
    }

    #tmo_Abreviatura {
        text-transform: uppercase;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.sue_Id)
    @Html.HiddenFor(model => model.emp_Id)

    <div class="card">
        <div class="card-header d-flex p-0 ui-sortable-handle">
            <h3 class="card-title p-3">
                <i class="fa fa-refresh  mr-1"></i>
                Editar Sueldo
            </h3>
            <ul class="nav nav-pills ml-auto p-2">
                <li class="nav-item">
                    @Html.ActionLink("Regresar", "Index", null, new { @class = "btn btn-primary" })
                </li>
            </ul>
        </div>
        <!-- /.card-header -->
        <div class="card-body">
            <div id="example1_wrapper" class="dataTables_wrapper dt-bootstrap4">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                         

                            <div class="form-group">
                                @Html.LabelFor(model => model.emp_Id, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-10">
                                    @Html.DropDownList("emp_Id", null, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
                                    @Html.ValidationMessageFor(model => model.emp_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.tmo_Id, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("tmo_Id", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.tmo_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Cantidad, "Sueldo", htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-10">

                                    @Html.EditorFor(model => model.Cantidad, new { htmlAttributes = new { @class = "form-control", @OnKeyPress = "return soloNumeros(event)", @onChange = "MASK(this,this.value,'-###,###,###,##0.00',1)", @style = "text-align:right" } })
                                    @Html.ValidationMessageFor(model => model.Cantidad, "", new { @class = "text-danger", @id = "cant" })
                                </div>
                            </div>



                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Guardar" id="Save" class="btn btn-primary" />
                                    @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-default" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>

    </div>

}

@section Scripts{
    <script src="~/Scripts/app/General_PCAE.js"></script>
    <script src="~/Scripts/app/General.js"></script>
    <script src="~/Scripts/app/Empleados.js"></script>
    <script type="text/javascript">

        $("#Cantidad").blur(function () {
            valido1 = document.getElementById('cant');

            var cant = $('#Cantidad').val();

            if (cant <= 0) {

                $('#Cantidad').val("");
                $('#Cantidad').focus();
                valido1.innerText = "El sueldo debe ser mayor a 0.";

            }

            else {
                valido1.innerText = "";
            }
        });


        function MASK(form, n, mask, format) {
            if (format == "undefined") format = false;
            if (format || NUM(n)) {
                dec = 0, point = 0;
                x = mask.indexOf(".") + 1;
                if (x) { dec = mask.length - x; }



                if (dec) {
                    n = NUM(n, dec) + "";
                    x = n.indexOf(".") + 1;
                    if (x) { point = n.length - x; } else { n += "."; }
                } else {
                    n = NUM(n, 0) + "";
                }
                for (var x = point; x < dec; x++) {
                    n += "0";
                }
                x = n.length, y = mask.length, XMASK = "";
                while (x || y) {
                    if (x) {
                        while (y && "#0.".indexOf(mask.charAt(y - 1)) == -1) {
                            if (n.charAt(x - 1) != "-")
                                XMASK = mask.charAt(y - 1) + XMASK;
                            y--;
                        }
                        XMASK = n.charAt(x - 1) + XMASK, x--;
                    } else if (y && "$0".indexOf(mask.charAt(y - 1)) + 1) {
                        XMASK = mask.charAt(y - 1) + XMASK;
                    }
                    if (y) { y-- }
                }
            } else {
                XMASK = "";
            }
            if (form) {
                form.value = XMASK;
                if (NUM(n) < 0) {
                    form.style.color = "#FF0000";
                } else {
                    form.style.color = "#000000";
                }
            }
            return XMASK;
        }



        // Convierte una cadena alfanumérica a numérica (incluyendo formulas aritméticas)
        //
        // s   = cadena a ser convertida a numérica
        // dec = numero de decimales a redondear
        //
        // La función devuelve el numero redondeado



        function NUM(s, dec) {
            for (var s = s + "", num = "", x = 0; x < s.length; x++) {
                c = s.charAt(x);
                if (".-+/*".indexOf(c) + 1 || c != " " && !isNaN(c)) { num += c; }
            }
            if (isNaN(num)) { num = eval(num); }
            if (num == "") { num = 0; } else { num = parseFloat(num); }
            if (dec != undefined) {
                r = .5; if (num < 0) r = -r;
                e = Math.pow(10, (dec > 0) ? dec : 0);
                return parseInt(num * e + r) / e;
            } else {
                return num;
            }
        }

        const cantidad = document.getElementById('Cantidad')
        document.addEventListener('DOMContentLoaded', (event) => {
            console.log('Metido');
            cantidad.value = parseFloat(cantidad.value.replace(/,/g, ""))
                .toFixed(2)
                .toString()
                .replace(/\B(?=(\d{3})+(?!\d))/g, ",")
        });

    </script>
}