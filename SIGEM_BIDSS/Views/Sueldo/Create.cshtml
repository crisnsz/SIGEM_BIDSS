@model SIGEM_BIDSS.Models.tbSueldo

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<input type="hidden" id="vSwal" value="@TempData["swalfunction"]" />
<input type="hidden" id="Existe" value="@ViewBag.Existencia" />
<style>
    .validation-error {
        color: red;
        font-size: small;
    }

    .validation-summary-errors {
        color: red;
        font-size: small;
    }

    .required:after {
        content: "*";
        font-weight: bold;
        color: red;
    }

    #are_Descripcion {
        text-transform: uppercase;
    }
</style>

<div class="card card-primary card-outline">
    <div class="card-header d-flex p-0 ui-sortable-handle">
        <h3 class="card-title p-3">
            <i class="fa fa-upload mr-1"></i>
            Insertar Sueldo
        </h3>
        <ul class="nav nav-pills ml-auto p-2">
            <li class="nav-item">
                @Html.ActionLink("Regresar", "Index", null, new { @class = "btn btn-primary" })
            </li>
        </ul>
    </div>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <div class="card-body">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.emp_Id, htmlAttributes: new { @class = "control-label col-md-8" })
                    @if (ViewBag.empIsNull == 0 || ViewBag.empIsNull == null)
                    {
                      
                        @Html.DropDownList("emp_Id", null, "Seleccione Empleado", htmlAttributes: new { @class = "form-control"  })
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.emp_Id)
                        @Html.DropDownList("emp_Id", null, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
                    }
                    @Html.ValidationMessageFor(model => model.emp_Id, "", new { @class = "text-danger" , id = "Id" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.tmo_Id, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.DropDownList("tmo_Id", null, "Seleccione Moneda", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.tmo_Id, "", new { @class = "text-danger" ,id = "Mon" })
                    </div>
                </div>


                <div class="form-group" >
                    @Html.LabelFor(model => model.Cantidad, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(model => model.Cantidad, new { htmlAttributes = new { @class = "form-control", maxlength = "7", @OnKeyPress = "return soloNumeros(event)", @onChange = "MASK(this,this.value,'-###,###,###,##0.00',1)" , @style = "text-align:right" } })
                        @Html.ValidationMessageFor(model => model.Cantidad, "", new { @class = "text-danger", id = "Cant" })

                    </div>
                </div>






                <div class="form-group">
                    <div class="col-md-offset-4 col-md-4">
                        <input type="button" id="Save" class="btn btn-primary" value="Guardar" />
                        @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-default" })
                    </div>
                </div>

            </div>


        </div>
    }

</div>



<div class="modal fade" id="ModalGuardar" tabindex="-1" data-backdrop="static" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">
                    Este empleado ya tiene asignado su sueldo.
                    ¿Desea asignarle un nuevo sueldo?
                </h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
          
            <div class="modal-footer">
                @*<button class="btn btn-primary" type="submit" id="btnRaInac">Aceptar</button>*@

                <a href="" id="Aceptar" class="btn btn-primary">Aceptar </a>

                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script src="~/Content/template/plugins/datepicker/js/bootstrap-datepicker.min.js"></script>
    <script src="~/Content/template/plugins/bs-custom-file-input/bs-custom-file-input.min.js"></script>
    <script src="~/Content/template/plugins/input-mask/jquery.inputmask.js"></script>
    @*<script src="~/Scripts/app/Empleados.js"></script>*@
    <script src="~/Scripts/app/General_PCAE.js"></script>
    <script type="text/javascript">

        $("#Cantidad").blur(function () {
            valido1 = document.getElementById('Cant');

            var Cant = $('#Cantidad').val();

            if (Cant <= 0) {

                $('#Cantidad').val("");
                $('#Cantidad').focus();
                valido1.innerText = "El sueldo debe ser mayor a 0.";

            }

            else {
                valido1.innerText = "";
            }
        });


        document.getElementById("Save").addEventListener("click", function () {
            //
            var v_emp_Id = document.getElementById('emp_Id').value;
            var b_emp_Id = true;

            //
            var v_tmo_Id = document.getElementById('tmo_Id').value;
            var b_tmo_Id = true;
            //
            var v_Cantidad = document.getElementById('Cantidad').value;
            var b_Cantidad = true;
      

            if (v_emp_Id === "") {
                document.getElementById('Id').innerHTML = "Campo Requerido"
                b_emp_Id = false;
            }
            else
            {
        
                document.getElementById('Id').innerText = ""
            }

            if (v_tmo_Id === "") {
                document.getElementById('Mon').innerText = "Campo Requerido"
                b_tmo_Id = false;
            }
         
            if (v_Cantidad === "") {
                document.getElementById('Cant').innerText = "Campo Requerido"
                b_Cantidad = false;
            }
            
            if (b_emp_Id && b_tmo_Id && b_Cantidad ) {
                $('#ModalGuardar').modal();
            }
        })



        $(document).on("click", "#Save", function () {

            var R = document.getElementById('emp_Id')
            var emp_IdText= R.options[R.selectedIndex].text

            var emp = $('#emp_Id').val();
            var Moneda = $('#tmo_Id').val();
            var Existe = $('#Existe').val();


            if (emp_IdText.startsWith('Seleccione'))

            {
                console.log("El campo Municipio es obligatorio.");

            }
        
            $.ajax({
                url: "/Sueldo/GetExistencia",
                method: "POST",
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ Sueldo: emp }),
            })

                .done(function (data) {

                    console.log(data);

                    if (data.ver) {
                        document.getElementById('Aceptar').setAttribute('href', '/Sueldo/Edit/' + data.emp_Id);
                        $('#ModalGuardar').modal('show');
                    }
                    else {
                        $("form").submit();
                    }
                });


        })



        //Quitar mensajes de error cuando el valor cambia
        //DropdownList
        $("#emp_Id").change(function () {
            var emp_Id = $("#emp_Id").val();
            if (emp_Id !== "") {
                $("#Id").text("");
            }
        });

        $("#tmo_Id").change(function () {
            var tmo_Id = $("#tmo_Id").val();
            if (tmo_Id !== "") {
                $("#Mon").text("");
            }
        });
        $("#Cantidad").change(function () {
            var Cantidad = $("#Cantidad").val();
            if (Cantidad !== "") {
                $("#Cant").text("");
            }
        });

    </script>



    <script type="text/javascript">

        function NUM(s, dec) {
            for (var s = s + "", num = "", x = 0; x < s.length; x++) {
                c = s.charAt(x);
                if (".-+/*".indexOf(c) + 1 || c != " " && !isNaN(c)) { num += c; }
            }
            if (isNaN(num)) { num = eval(num); }
            if (num == "") { num = 0; } else { num = parseFloat(num); }
            if (dec != undefined) {
                r = .5; if (num < 0) r = -r;
                e = Math.pow(10, (dec > 0) ? dec : 0);
                return parseInt(num * e + r) / e;
            } else {
                return num;
            }
        }


        // formatea un numero según una mascara dada ej: "-$###,###,##0.00"
        //
        // elm   = elemento html <input> donde colocar el resultado
        // n     = numero a formatear
        // mask  = mascara ej: "-$###,###,##0.00"
        // force = formatea el numero aun si n es igual a 0

        // La función devuelve el numero formateado
        

        function MASK(form, n, mask, format) {
            if (format == "undefined") format = false;
            if (format || NUM(n)) {
                dec = 0, point = 0;
                x = mask.indexOf(".") + 1;
                if (x) { dec = mask.length - x; }



                if (dec) {
                    n = NUM(n, dec) + "";
                    x = n.indexOf(".") + 1;
                    if (x) { point = n.length - x; } else { n += "."; }
                } else {
                    n = NUM(n, 0) + "";
                }
                for (var x = point; x < dec; x++) {
                    n += "0";
                }
                x = n.length, y = mask.length, XMASK = "";
                while (x || y) {
                    if (x) {
                        while (y && "#0.".indexOf(mask.charAt(y - 1)) == -1) {
                            if (n.charAt(x - 1) != "-")
                                XMASK = mask.charAt(y - 1) + XMASK;
                            y--;
                        }
                        XMASK = n.charAt(x - 1) + XMASK, x--;
                    } else if (y && "$0".indexOf(mask.charAt(y - 1)) + 1) {
                        XMASK = mask.charAt(y - 1) + XMASK;
                    }
                    if (y) { y-- }
                }
            } else {
                XMASK = "";
            }
            if (form) {
                form.value = XMASK;
                if (NUM(n) < 0) {
                    form.style.color = "#FF0000";
                } else {
                    form.style.color = "#000000";
                }
            }
            return XMASK;
        }

    </script>


}